import { Tree, TreeItem } from "./tree";
export class OutlineTree extends Tree {
    createTreeItem(heading, parent, depth) {
        let item = new OutlineTreeItem(this, parent, depth);
        item.title = heading.heading;
        item.href = "#" + heading.heading.replaceAll(" ", "_");
        return item;
    }
    constructor(file, minDepth = 1) {
        var _a, _b, _c, _d;
        super();
        this.minDepth = 1;
        this.depth = 0;
        this.minDepth = minDepth;
        let headings = (_b = (_a = app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.headings) !== null && _b !== void 0 ? _b : [];
        if (headings.length > 0 && (headings[0].level != 1 && minDepth <= 1 && headings[0].heading != file.basename))
            headings.unshift({ heading: file.basename, level: 1, position: { start: { col: 0, line: 0, offset: 0 }, end: { col: 0, line: 0, offset: 0 } } });
        this.depth = Math.min(...headings.map(h => h.level)) - 1;
        let parent = this;
        for (let heading of headings) {
            if (heading.level < minDepth)
                continue;
            if (heading.level > parent.depth) {
                let child = this.createTreeItem(heading, parent, heading.level);
                parent.children.push(child);
                if (heading.level == parent.depth + 1)
                    parent = child;
            }
            else if (heading.level == parent.depth) {
                if (parent instanceof OutlineTreeItem) {
                    let child = this.createTreeItem(heading, parent.parent, heading.level);
                    parent.parent.children.push(child);
                    parent = child;
                }
            }
            else if (heading.level < parent.depth) {
                if (parent instanceof OutlineTreeItem) {
                    let levelChange = parent.depth - heading.level;
                    let backParent = (_c = parent.parent) !== null && _c !== void 0 ? _c : parent;
                    for (let i = 0; i < levelChange; i++) {
                        if (backParent instanceof OutlineTreeItem)
                            backParent = (_d = backParent.parent) !== null && _d !== void 0 ? _d : backParent;
                    }
                    let child = this.createTreeItem(heading, backParent, heading.level);
                    backParent.children.push(child);
                    parent = child;
                }
            }
        }
    }
}
export class OutlineTreeItem extends TreeItem {
    constructor(tree, parent, depth) {
        super(tree, parent, depth);
        this.children = [];
    }
    forAllChildren(func, recursive = true) {
        super.forAllChildren(func, recursive);
    }
    isCollapsible() {
        return super.isCollapsible() && this.depth > 1;
    }
}
//# sourceMappingURL=data:application/json;base64,