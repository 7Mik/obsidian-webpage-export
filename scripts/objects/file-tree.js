import { TFolder } from "obsidian";
import { Tree, TreeItem } from "./tree";
import { Path } from "scripts/utils/path";
import { MarkdownRenderer } from "scripts/html-generation/markdown-renderer";
export class FileTree extends Tree {
    constructor(files, keepOriginalExtensions = false, sort = true) {
        super();
        this.children = [];
        this.renderMarkdownTitles = false;
        for (let file of files) {
            let pathSections = [];
            let parentFile = file;
            while (parentFile != undefined) {
                pathSections.push(parentFile);
                parentFile = parentFile.parent;
            }
            pathSections.reverse();
            let parent = this;
            for (let i = 1; i < pathSections.length; i++) {
                let section = pathSections[i];
                let isFolder = section instanceof TFolder;
                let child = parent.children.find(sibling => sibling.title == section.name && sibling.isFolder == isFolder && sibling.depth == i);
                if (child == undefined) {
                    child = new FileTreeItem(this, parent, i);
                    child.title = section.name;
                    child.isFolder = isFolder;
                    if (child.isFolder)
                        child.itemClass = "mod-tree-folder";
                    else
                        child.itemClass = "mod-tree-file";
                    parent.children.push(child);
                }
                parent = child;
            }
            if (parent instanceof FileTreeItem) {
                let path = new Path(file.path).makeUnixStyle();
                if (file instanceof TFolder)
                    path.makeForceFolder();
                else if (!keepOriginalExtensions && MarkdownRenderer.isConvertable(path.extensionName))
                    path.setExtension("html");
                parent.href = path.asString;
                parent.title = path.basename == "." ? "" : path.basename;
            }
        }
        if (sort) {
            this.sortAlphabetically();
            this.sortByIsFolder();
        }
    }
    sortByIsFolder(reverse = false) {
        this.children.sort((a, b) => reverse ? (a.isFolder && !b.isFolder ? -1 : 1) : (a.isFolder && !b.isFolder ? -1 : 1));
        for (let child of this.children) {
            child.sortByIsFolder(reverse);
        }
    }
    forAllChildren(func, recursive = true) {
        for (let child of this.children) {
            func(child);
            if (recursive)
                child.forAllChildren(func);
        }
    }
}
export class FileTreeItem extends TreeItem {
    constructor() {
        super(...arguments);
        this.children = [];
        this.isFolder = false;
    }
    forAllChildren(func, recursive = true) {
        super.forAllChildren(func, recursive);
    }
    sortByIsFolder(reverse = false) {
        this.children.sort((a, b) => reverse ? (a.isFolder && !b.isFolder ? -1 : 1) : (a.isFolder && !b.isFolder ? -1 : 1));
        for (let child of this.children) {
            child.sortByIsFolder(reverse);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS10cmVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZS10cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0IsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUU3RSxNQUFNLE9BQU8sUUFBUyxTQUFRLElBQUk7SUFJakMsWUFBbUIsS0FBYyxFQUFFLHlCQUFrQyxLQUFLLEVBQUUsSUFBSSxHQUFHLElBQUk7UUFFdEYsS0FBSyxFQUFFLENBQUM7UUFKRixhQUFRLEdBQW1CLEVBQUUsQ0FBQztRQU1wQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBRWxDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUN0QjtZQUNDLElBQUksWUFBWSxHQUFvQixFQUFFLENBQUM7WUFFdkMsSUFBSSxVQUFVLEdBQWtCLElBQUksQ0FBQztZQUNyQyxPQUFPLFVBQVUsSUFBSSxTQUFTLEVBQzlCO2dCQUNDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzlCLFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO2FBQy9CO1lBRUQsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXZCLElBQUksTUFBTSxHQUE0QixJQUFJLENBQUM7WUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQzVDO2dCQUNDLElBQUksT0FBTyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxRQUFRLEdBQUcsT0FBTyxZQUFZLE9BQU8sQ0FBQztn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QUFLLENBQUM7SUFlekIsQ0FBQztJQWJPLGNBQWMsQ0FBQyxJQUFtQyxFQUFFLFlBQXFCLElBQUk7UUFFbkYsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLGNBQWMsQ0FBQyxVQUFtQixLQUFLO1FBRTdDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BILEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsRUFDL0I7WUFDQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzlCO0lBQ0YsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEFic3RyYWN0RmlsZSwgVEZpbGUsIFRGb2xkZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgVHJlZSwgVHJlZUl0ZW0gfSBmcm9tIFwiLi90cmVlXCI7XHJcbmltcG9ydCB7IFBhdGggfSBmcm9tIFwic2NyaXB0cy91dGlscy9wYXRoXCI7XHJcbmltcG9ydCB7IE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwic2NyaXB0cy9odG1sLWdlbmVyYXRpb24vbWFya2Rvd24tcmVuZGVyZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlVHJlZSBleHRlbmRzIFRyZWVcclxue1xyXG5cdHB1YmxpYyBjaGlsZHJlbjogRmlsZVRyZWVJdGVtW10gPSBbXTtcclxuXHJcblx0cHVibGljIGNvbnN0cnVjdG9yKGZpbGVzOiBURmlsZVtdLCBrZWVwT3JpZ2luYWxFeHRlbnNpb25zOiBib29sZWFuID0gZmFsc2UsIHNvcnQgPSB0cnVlKVxyXG5cdHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5yZW5kZXJNYXJrZG93blRpdGxlcyA9IGZhbHNlO1xyXG5cclxuXHRcdGZvciAobGV0IGZpbGUgb2YgZmlsZXMpXHJcblx0XHR7XHJcblx0XHRcdGxldCBwYXRoU2VjdGlvbnM6IFRBYnN0cmFjdEZpbGVbXSA9IFtdO1xyXG5cclxuXHRcdFx0bGV0IHBhcmVudEZpbGU6IFRBYnN0cmFjdEZpbGUgPSBmaWxlO1xyXG5cdFx0XHR3aGlsZSAocGFyZW50RmlsZSAhPSB1bmRlZmluZWQpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwYXRoU2VjdGlvbnMucHVzaChwYXJlbnRGaWxlKTtcclxuXHRcdFx0XHRwYXJlbnRGaWxlID0gcGFyZW50RmlsZS5wYXJlbnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHBhdGhTZWN0aW9ucy5yZXZlcnNlKCk7XHJcblxyXG5cdFx0XHRsZXQgcGFyZW50OiBGaWxlVHJlZUl0ZW0gfCBGaWxlVHJlZSA9IHRoaXM7XHJcblx0XHRcdGZvciAobGV0IGkgPSAxOyBpIDwgcGF0aFNlY3Rpb25zLmxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bGV0IHNlY3Rpb24gPSBwYXRoU2VjdGlvbnNbaV07XHJcblx0XHRcdFx0bGV0IGlzRm9sZGVyID0gc2VjdGlvbiBpbnN0YW5jZW9mIFRGb2xkZXI7XHJcblx0XHRcdFx0bGV0IGNoaWxkID0gcGFyZW50LmNoaWxkcmVuLmZpbmQoc2libGluZyA9PiBzaWJsaW5nLnRpdGxlID09IHNlY3Rpb24ubmFtZSAmJiBzaWJsaW5nLmlzRm9sZGVyID09IGlzRm9sZGVyICYmIHNpYmxpbmcuZGVwdGggPT0gaSkgYXMgRmlsZVRyZWVJdGVtIHwgdW5kZWZpbmVkO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmIChjaGlsZCA9PSB1bmRlZmluZWQpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Y2hpbGQgPSBuZXcgRmlsZVRyZWVJdGVtKHRoaXMsIHBhcmVudCwgaSk7XHJcblx0XHRcdFx0XHRjaGlsZC50aXRsZSA9IHNlY3Rpb24ubmFtZTtcclxuXHRcdFx0XHRcdGNoaWxkLmlzRm9sZGVyID0gaXNGb2xkZXI7XHJcblxyXG5cdFx0XHRcdFx0aWYoY2hpbGQuaXNGb2xkZXIpIGNoaWxkLml0ZW1DbGFzcyA9IFwibW9kLXRyZWUtZm9sZGVyXCJcclxuXHRcdFx0XHRcdGVsc2UgY2hpbGQuaXRlbUNsYXNzID0gXCJtb2QtdHJlZS1maWxlXCJcclxuXHJcblx0XHRcdFx0XHRwYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHBhcmVudCA9IGNoaWxkO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAocGFyZW50IGluc3RhbmNlb2YgRmlsZVRyZWVJdGVtKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bGV0IHBhdGggPSBuZXcgUGF0aChmaWxlLnBhdGgpLm1ha2VVbml4U3R5bGUoKTtcclxuXHRcdFx0XHRpZiAoZmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHBhdGgubWFrZUZvcmNlRm9sZGVyKCk7XHJcblx0XHRcdFx0ZWxzZSBpZigha2VlcE9yaWdpbmFsRXh0ZW5zaW9ucyAmJiBNYXJrZG93blJlbmRlcmVyLmlzQ29udmVydGFibGUocGF0aC5leHRlbnNpb25OYW1lKSkgcGF0aC5zZXRFeHRlbnNpb24oXCJodG1sXCIpO1xyXG5cdFx0XHRcdHBhcmVudC5ocmVmID0gcGF0aC5hc1N0cmluZztcclxuXHRcdFx0XHRwYXJlbnQudGl0bGUgPSBwYXRoLmJhc2VuYW1lID09IFwiLlwiID8gXCJcIiA6IHBhdGguYmFzZW5hbWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc29ydCkgXHJcblx0XHR7XHJcblx0XHRcdHRoaXMuc29ydEFscGhhYmV0aWNhbGx5KCk7XHJcblx0XHRcdHRoaXMuc29ydEJ5SXNGb2xkZXIoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzb3J0QnlJc0ZvbGRlcihyZXZlcnNlOiBib29sZWFuID0gZmFsc2UpXHJcblx0e1xyXG5cdFx0dGhpcy5jaGlsZHJlbi5zb3J0KChhLCBiKSA9PiByZXZlcnNlID8gKGEuaXNGb2xkZXIgJiYgIWIuaXNGb2xkZXIgPyAtMSA6IDEpIDogKGEuaXNGb2xkZXIgJiYgIWIuaXNGb2xkZXIgPyAtMSA6IDEpKTtcclxuXHRcdGZvciAobGV0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pXHJcblx0XHR7XHJcblx0XHRcdGNoaWxkLnNvcnRCeUlzRm9sZGVyKHJldmVyc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIGZvckFsbENoaWxkcmVuKGZ1bmM6IChjaGlsZDogRmlsZVRyZWVJdGVtKSA9PiB2b2lkLCByZWN1cnNpdmU6IGJvb2xlYW4gPSB0cnVlKVxyXG5cdHtcclxuXHRcdGZvciAobGV0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pXHJcblx0XHR7XHJcblx0XHRcdGZ1bmMoY2hpbGQpO1xyXG5cdFx0XHRpZiAocmVjdXJzaXZlKSBjaGlsZC5mb3JBbGxDaGlsZHJlbihmdW5jKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlVHJlZUl0ZW0gZXh0ZW5kcyBUcmVlSXRlbVxyXG57XHJcblx0cHVibGljIGNoaWxkcmVuOiBGaWxlVHJlZUl0ZW1bXSA9IFtdO1xyXG5cdHB1YmxpYyBwYXJlbnQ6IEZpbGVUcmVlSXRlbSB8IEZpbGVUcmVlO1xyXG5cdHB1YmxpYyBpc0ZvbGRlciA9IGZhbHNlO1xyXG5cclxuXHRwdWJsaWMgZm9yQWxsQ2hpbGRyZW4oZnVuYzogKGNoaWxkOiBGaWxlVHJlZUl0ZW0pID0+IHZvaWQsIHJlY3Vyc2l2ZTogYm9vbGVhbiA9IHRydWUpXHJcblx0e1xyXG5cdFx0c3VwZXIuZm9yQWxsQ2hpbGRyZW4oZnVuYywgcmVjdXJzaXZlKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzb3J0QnlJc0ZvbGRlcihyZXZlcnNlOiBib29sZWFuID0gZmFsc2UpXHJcblx0e1xyXG5cdFx0dGhpcy5jaGlsZHJlbi5zb3J0KChhLCBiKSA9PiByZXZlcnNlID8gKGEuaXNGb2xkZXIgJiYgIWIuaXNGb2xkZXIgPyAtMSA6IDEpIDogKGEuaXNGb2xkZXIgJiYgIWIuaXNGb2xkZXIgPyAtMSA6IDEpKTtcclxuXHRcdGZvciAobGV0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pXHJcblx0XHR7XHJcblx0XHRcdGNoaWxkLnNvcnRCeUlzRm9sZGVyKHJldmVyc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iXX0=